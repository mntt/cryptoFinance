#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace cryptoFinance
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CryptoDatabase")]
	public partial class DataConverterDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLastTimeUpdatedList(LastTimeUpdatedList instance);
    partial void UpdateLastTimeUpdatedList(LastTimeUpdatedList instance);
    partial void DeleteLastTimeUpdatedList(LastTimeUpdatedList instance);
    partial void InsertCurrentAssetsDB(CurrentAssetsDB instance);
    partial void UpdateCurrentAssetsDB(CurrentAssetsDB instance);
    partial void DeleteCurrentAssetsDB(CurrentAssetsDB instance);
    partial void InsertCoingeckoCryptoList(CoingeckoCryptoList instance);
    partial void UpdateCoingeckoCryptoList(CoingeckoCryptoList instance);
    partial void DeleteCoingeckoCryptoList(CoingeckoCryptoList instance);
    partial void InsertCryptoTable(CryptoTable instance);
    partial void UpdateCryptoTable(CryptoTable instance);
    partial void DeleteCryptoTable(CryptoTable instance);
    #endregion
		
		public DataConverterDataContext() : 
				base(global::cryptoFinance.Properties.Settings.Default.CryptoDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataConverterDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataConverterDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataConverterDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataConverterDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LastTimeUpdatedList> LastTimeUpdatedLists
		{
			get
			{
				return this.GetTable<LastTimeUpdatedList>();
			}
		}
		
		public System.Data.Linq.Table<CurrentAssetsDB> CurrentAssetsDBs
		{
			get
			{
				return this.GetTable<CurrentAssetsDB>();
			}
		}
		
		public System.Data.Linq.Table<CoingeckoCryptoList> CoingeckoCryptoLists
		{
			get
			{
				return this.GetTable<CoingeckoCryptoList>();
			}
		}
		
		public System.Data.Linq.Table<CryptoTable> CryptoTables
		{
			get
			{
				return this.GetTable<CryptoTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LastTimeUpdatedList")]
	public partial class LastTimeUpdatedList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public LastTimeUpdatedList()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurrentAssets")]
	public partial class CurrentAssetsDB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Cryptocurrency;
		
		private bool _CustomCoin;
		
		private decimal _Quantity;
		
		private System.DateTime _PriceUpdateTime;
		
		private decimal _Price;
		
		private decimal _CurrentValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCryptocurrencyChanging(string value);
    partial void OnCryptocurrencyChanged();
    partial void OnCustomCoinChanging(bool value);
    partial void OnCustomCoinChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnPriceUpdateTimeChanging(System.DateTime value);
    partial void OnPriceUpdateTimeChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnCurrentValueChanging(decimal value);
    partial void OnCurrentValueChanged();
    #endregion
		
		public CurrentAssetsDB()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cryptocurrency", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Cryptocurrency
		{
			get
			{
				return this._Cryptocurrency;
			}
			set
			{
				if ((this._Cryptocurrency != value))
				{
					this.OnCryptocurrencyChanging(value);
					this.SendPropertyChanging();
					this._Cryptocurrency = value;
					this.SendPropertyChanged("Cryptocurrency");
					this.OnCryptocurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomCoin", DbType="Bit NOT NULL")]
		public bool CustomCoin
		{
			get
			{
				return this._CustomCoin;
			}
			set
			{
				if ((this._CustomCoin != value))
				{
					this.OnCustomCoinChanging(value);
					this.SendPropertyChanging();
					this._CustomCoin = value;
					this.SendPropertyChanged("CustomCoin");
					this.OnCustomCoinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,8) NOT NULL")]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceUpdateTime", DbType="DateTime NOT NULL")]
		public System.DateTime PriceUpdateTime
		{
			get
			{
				return this._PriceUpdateTime;
			}
			set
			{
				if ((this._PriceUpdateTime != value))
				{
					this.OnPriceUpdateTimeChanging(value);
					this.SendPropertyChanging();
					this._PriceUpdateTime = value;
					this.SendPropertyChanged("PriceUpdateTime");
					this.OnPriceUpdateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,10) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentValue", DbType="Decimal(18,4) NOT NULL")]
		public decimal CurrentValue
		{
			get
			{
				return this._CurrentValue;
			}
			set
			{
				if ((this._CurrentValue != value))
				{
					this.OnCurrentValueChanging(value);
					this.SendPropertyChanging();
					this._CurrentValue = value;
					this.SendPropertyChanged("CurrentValue");
					this.OnCurrentValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoingeckoCryptoList")]
	public partial class CoingeckoCryptoList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Data.Linq.Binary _Logo;
		
		private string _CryptoId;
		
		private string _CryptoSymbol;
		
		private string _CryptoName;
		
		private decimal _MarketCap;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLogoChanging(System.Data.Linq.Binary value);
    partial void OnLogoChanged();
    partial void OnCryptoIdChanging(string value);
    partial void OnCryptoIdChanged();
    partial void OnCryptoSymbolChanging(string value);
    partial void OnCryptoSymbolChanged();
    partial void OnCryptoNameChanging(string value);
    partial void OnCryptoNameChanged();
    partial void OnMarketCapChanging(decimal value);
    partial void OnMarketCapChanged();
    #endregion
		
		public CoingeckoCryptoList()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CryptoId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CryptoId
		{
			get
			{
				return this._CryptoId;
			}
			set
			{
				if ((this._CryptoId != value))
				{
					this.OnCryptoIdChanging(value);
					this.SendPropertyChanging();
					this._CryptoId = value;
					this.SendPropertyChanged("CryptoId");
					this.OnCryptoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CryptoSymbol", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CryptoSymbol
		{
			get
			{
				return this._CryptoSymbol;
			}
			set
			{
				if ((this._CryptoSymbol != value))
				{
					this.OnCryptoSymbolChanging(value);
					this.SendPropertyChanging();
					this._CryptoSymbol = value;
					this.SendPropertyChanged("CryptoSymbol");
					this.OnCryptoSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CryptoName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CryptoName
		{
			get
			{
				return this._CryptoName;
			}
			set
			{
				if ((this._CryptoName != value))
				{
					this.OnCryptoNameChanging(value);
					this.SendPropertyChanging();
					this._CryptoName = value;
					this.SendPropertyChanged("CryptoName");
					this.OnCryptoNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketCap", DbType="Decimal(18,0) NOT NULL")]
		public decimal MarketCap
		{
			get
			{
				return this._MarketCap;
			}
			set
			{
				if ((this._MarketCap != value))
				{
					this.OnMarketCapChanging(value);
					this.SendPropertyChanging();
					this._MarketCap = value;
					this.SendPropertyChanged("MarketCap");
					this.OnMarketCapChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CryptoTable")]
	public partial class CryptoTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _OperationID;
		
		private System.DateTime _Date;
		
		private string _CryptoName;
		
		private bool _CustomCoin;
		
		private decimal _CryptoQuantity;
		
		private string _Operation;
		
		private string _Wallet;
		
		private decimal _Sum;
		
		private decimal _Fee;
		
		private decimal _LastPrice;
		
		private decimal _LastCurrentValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOperationIDChanging(int value);
    partial void OnOperationIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCryptoNameChanging(string value);
    partial void OnCryptoNameChanged();
    partial void OnCustomCoinChanging(bool value);
    partial void OnCustomCoinChanged();
    partial void OnCryptoQuantityChanging(decimal value);
    partial void OnCryptoQuantityChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnWalletChanging(string value);
    partial void OnWalletChanged();
    partial void OnSumChanging(decimal value);
    partial void OnSumChanged();
    partial void OnFeeChanging(decimal value);
    partial void OnFeeChanged();
    partial void OnLastPriceChanging(decimal value);
    partial void OnLastPriceChanged();
    partial void OnLastCurrentValueChanging(decimal value);
    partial void OnLastCurrentValueChanged();
    #endregion
		
		public CryptoTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationID", DbType="Int NOT NULL")]
		public int OperationID
		{
			get
			{
				return this._OperationID;
			}
			set
			{
				if ((this._OperationID != value))
				{
					this.OnOperationIDChanging(value);
					this.SendPropertyChanging();
					this._OperationID = value;
					this.SendPropertyChanged("OperationID");
					this.OnOperationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime2 NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CryptoName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CryptoName
		{
			get
			{
				return this._CryptoName;
			}
			set
			{
				if ((this._CryptoName != value))
				{
					this.OnCryptoNameChanging(value);
					this.SendPropertyChanging();
					this._CryptoName = value;
					this.SendPropertyChanged("CryptoName");
					this.OnCryptoNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomCoin", DbType="Bit NOT NULL")]
		public bool CustomCoin
		{
			get
			{
				return this._CustomCoin;
			}
			set
			{
				if ((this._CustomCoin != value))
				{
					this.OnCustomCoinChanging(value);
					this.SendPropertyChanging();
					this._CustomCoin = value;
					this.SendPropertyChanged("CustomCoin");
					this.OnCustomCoinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CryptoQuantity", DbType="Decimal(18,8) NOT NULL")]
		public decimal CryptoQuantity
		{
			get
			{
				return this._CryptoQuantity;
			}
			set
			{
				if ((this._CryptoQuantity != value))
				{
					this.OnCryptoQuantityChanging(value);
					this.SendPropertyChanging();
					this._CryptoQuantity = value;
					this.SendPropertyChanged("CryptoQuantity");
					this.OnCryptoQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operation", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wallet", DbType="NVarChar(MAX)")]
		public string Wallet
		{
			get
			{
				return this._Wallet;
			}
			set
			{
				if ((this._Wallet != value))
				{
					this.OnWalletChanging(value);
					this.SendPropertyChanging();
					this._Wallet = value;
					this.SendPropertyChanged("Wallet");
					this.OnWalletChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sum", DbType="Decimal(18,4) NOT NULL")]
		public decimal Sum
		{
			get
			{
				return this._Sum;
			}
			set
			{
				if ((this._Sum != value))
				{
					this.OnSumChanging(value);
					this.SendPropertyChanging();
					this._Sum = value;
					this.SendPropertyChanged("Sum");
					this.OnSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fee", DbType="Decimal(18,4) NOT NULL")]
		public decimal Fee
		{
			get
			{
				return this._Fee;
			}
			set
			{
				if ((this._Fee != value))
				{
					this.OnFeeChanging(value);
					this.SendPropertyChanging();
					this._Fee = value;
					this.SendPropertyChanged("Fee");
					this.OnFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPrice", DbType="Decimal(18,10) NOT NULL")]
		public decimal LastPrice
		{
			get
			{
				return this._LastPrice;
			}
			set
			{
				if ((this._LastPrice != value))
				{
					this.OnLastPriceChanging(value);
					this.SendPropertyChanging();
					this._LastPrice = value;
					this.SendPropertyChanged("LastPrice");
					this.OnLastPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastCurrentValue", DbType="Decimal(18,4) NOT NULL")]
		public decimal LastCurrentValue
		{
			get
			{
				return this._LastCurrentValue;
			}
			set
			{
				if ((this._LastCurrentValue != value))
				{
					this.OnLastCurrentValueChanging(value);
					this.SendPropertyChanging();
					this._LastCurrentValue = value;
					this.SendPropertyChanged("LastCurrentValue");
					this.OnLastCurrentValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
